#
# @NOTE
# This file is no longer in use!
# Saving it as a reference.
#

# Helper function to quickly access Neue (in Paraneue)
function neueds() {
  dspath
  cd ./html/profiles/dosomething/themes/dosomething/paraneue/paraneue/bower_components/neue/scss
  pwd
}

# Helper function to quickly access Neue (standalone)
function neue() {
  dspath
  cd ../neue
  pwd
}

# Helper function to quickly access Paraneue
function paraneue() {
  dspath
  cd ./html/profiles/dosomething/themes/dosomething/paraneue/
  pwd
}

# Helper function to quickly access Paraneue Dosomething
function paraneueds() {
  dspath
  cd ./lib/themes/dosomething/paraneue_dosomething/
  pwd
}

# Helper function to run change the directory of the subshell
# @TODO - One should be able to call "ds *" and pass a variety
#         of paths or flags directly, e.g. "ds /" or "ds build"
function dspath() {
  # Run this in the appropriate directory
  if [ -n "$DS_PRODUCTION" ]; then
    cd $DS_PRODUCTION
  else
    echo -e "\033[1;31m[ DS_PRODUCTION variable not set! ]\n\033[01;37m"
    # How do I kill this function?
  fi
}

# Helper function to update the front-end libraries in the DS development environment
function dsgrunt() {
  # Run this in the appropriate directory
  dspath

  # SSH into the VM and update Grunt
  echo -e "\033[01;33mOpening SSH tunnel..\033[01;37m"
  vagrant ssh -c "cd /vagrant && ds grunt"
  echo -e "\033[01;32m✓ Grunt & Co. Updated Successfully."
}

# Update Git environment by pulling upstream/dev, rebasing and pushing to origin dev
function dsup() {
  # Run this in the appropriate directory
  dspath

  # Ensure that your working tree is clean
  if git status | grep 'nothing to commit' > /dev/null; then
    # Run the update sequence
    echo -e "\033[01;33mChecking out dev..\033[01;37m"
    git checkout dev
    echo -e "\033[01;33mFetching upstream..\033[01;37m"
    git fetch upstream
    echo -e "\033[01;33mRebasing dev..\033[01;37m"
    git rebase upstream/dev
    echo -e "\033[01;33mUpdating fork..\033[01;37m"
    git push origin dev
    echo -e "\033[01;33mReturning to paraneue_dosomething/..\033[01;37m"
    paraneueds
    echo -e "\033[01;32m✓ Git Updated Successfully.\033[01;37m"
  else
    # Failed to update due to dirty working tree
    echo -e "\033[1;31m✗ Commit or stash changes before proceeding.\033[01;37m"
  fi
}

# Guard against my inability to recall my own function names
function dsupdate() {
  dsup
}

#
# TODO
# Add this to the current dsup() function above:
# if the user is not currently on dev, return them to their
# branch before exiting -- rebase, too!
#
function gtest() {
  local current_branch=`git branch | grep '*' | sed 's/* //'`
  echo $current_branch
}

# Gracefully reboot Vagrant
function dsreboot() {
  # Run this in the appropriate directory
  dspath

  echo -e "\033[01;33mSuspending Vagrant..\033[01;37m"
  vagrant suspend
  echo -e "\033[01;33mHalting Vagrant.\033[01;37m"
  vagrant halt
  echo -e "\033[01;33mRestarting Vagrant..\033[01;37m"
  vagrant up
  echo -e "\033[01;33mChecking status..\033[01;37m"
  vagrant status
  echo -e "\033[01;32m✓ Vagrant Reboot Complete\033[01;37m"
}

# Prune local and remote merged branches (off dev)
function dscleanup() {
  # Run this in the appropriate directory
  dspath

  echo -e "\033[01;33mPruning remote branches..\033[01;37m"
  git fetch --all --prune
  echo -e "\033[01;33mPruning local branches..\033[01;37m"
  git branch --merged dev | grep -v 'dev' | xargs git branch -d
  echo -e "\033[01;32m✓ Branch Cleanup Complete\033[01;37m"
}

# Guard against my inability to recall my own function names
function dsrestart() {
  dsreboot
}

# Rebuild the development environment
function dsrebuild() {
  # Run this in the appropriate directory
  dspath

  echo -e "\033[01;33mRebuilding your environment..\033[01;37m"
  vagrant ssh -c "cd /vagrant && ds build"
  echo -e "\033[01;33mPulling down the latest db from staging..\033[01;37m"
  vagrant ssh -c "cd /vagrant && ds pull stage"
  echo -e "\033[01;32m✓ Drupal Rebuild Complete\033[01;37m"
}

# Alias for passing Drush commands to our Vagrant environment
# Pro Tip! If you aren't using Drush locally, alias "drush"
# to call this command with:
# alias drush="dsdrush"
function dsdrush() {
  # Run this in the appropriate directory
  dspath

  echo -e "\033[01;33mOpening SSH tunnel..\033[01;37m"
  echo -e "\033[01;33mExecuting: \033[01;35m"drush $@"\033[01;37m"
  # @TODO - This isn't working!
  vagrant ssh -c "cd /vagrant/html && drush $@"
}

# Do everything
function dsall() {
  # Run this in the appropriate directory
  dspath

  dsup
  vagrant provision
  dsrebuild
  dsreboot
}

# Haaalp
function dshelp() {
  printf "%-14s %-20s\n" `tput setaf 3`dsup `tput setaf 7`-\ Update\ production\ codebase\ from\ remote\ on\ host\ machine
  printf "%-14s %-20s\n" `tput setaf 3`dsreboot `tput setaf 7`-\ Reboots\ the\ VM
  printf "%-14s %-20s\n" `tput setaf 3`dsrestart `tput setaf 7`-\ Calls\ dsreboot
  printf "%-14s %-20s\n" `tput setaf 3`dsrebuild `tput setaf 7`-\ Rebuild\ development\ environment
  printf "%-14s %-20s\n" `tput setaf 3`dscleanup `tput setaf 7`-\ Cleans\ up\ local\ and\ remote\ branches\ that\ have\ been\ merged 
  printf "%-14s %-20s\n" `tput setaf 3`dsgrunt `tput setaf 7`-\ Rebuild\ front-end\ environment
  printf "%-14s %-20s\n" `tput setaf 3`dsall `tput setaf 7`-\ Update\ production\ codebase,\ rebuild\ development\ environment\ and\ restart\ the\ VM
}
